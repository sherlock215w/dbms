CREATE TABLE Employee (
    emp_id NUMBER PRIMARY KEY,
    dept_id NUMBER,
    emp_name VARCHAR2(100),
    DoJ DATE,
    salary NUMBER,
    commission NUMBER,
    job_title VARCHAR2(50)
);
INSERT INTO Employee (emp_id, dept_id, emp_name, DoJ, salary, job_title)
VALUES (1, 101, 'John Doe', TO_DATE('2010-06-15', 'YYYY-MM-DD'), 12000, 'Manager');

INSERT INTO Employee (emp_id, dept_id, emp_name, DoJ, salary, job_title)
VALUES (2, 102, 'Jane Smith', TO_DATE('2012-07-22', 'YYYY-MM-DD'), 8000, 'Senior Developer');

INSERT INTO Employee (emp_id, dept_id, emp_name, DoJ, salary, job_title)
VALUES (3, 103, 'Alice Johnson', TO_DATE('2015-03-10', 'YYYY-MM-DD'), 2800, 'Junior Developer');

INSERT INTO Employee (emp_id, dept_id, emp_name, DoJ, salary, job_title)
VALUES (4, 104, 'Bob Lee', TO_DATE('2008-01-01', 'YYYY-MM-DD'), 6000, 'Analyst');

COMMIT;



---------------------------------------------------------------------------------------
CREATE OR REPLACE PROCEDURE calculate_commission IS
BEGIN
    FOR emp IN (SELECT emp_id, salary, DoJ FROM Employee) LOOP
        DECLARE
            experience NUMBER;
            commission_rate NUMBER;
        BEGIN
            -- Calculate years of experience
            experience := FLOOR((SYSDATE - emp.DoJ) / 365);

            -- Determine commission rate based on conditions
            IF emp.salary > 10000 THEN
                commission_rate := 0.004;
            ELSIF emp.salary < 10000 AND experience > 10 THEN
                commission_rate := 0.0035;
            ELSIF emp.salary < 3000 THEN
                commission_rate := 0.0025;
            ELSE
                commission_rate := 0.0015;
            END IF;

            -- Update the commission in the Employee table
            UPDATE Employee
            SET commission = emp.salary * commission_rate
            WHERE emp_id = emp.emp_id;
        END;
    END LOOP;

    COMMIT;
END;




Set serveroutput on;
BEGIN
    calculate_commission;
END;


-------------------------------------------------------------------------------------------------------
CREATE OR REPLACE FUNCTION get_manager_name(dept_id IN NUMBER) RETURN VARCHAR2 IS
    manager_name VARCHAR2(50);
BEGIN
    SELECT emp_name INTO manager_name
    FROM Employee
    WHERE dept_id = dept_id AND job_title = 'Manager';

    RETURN manager_name;
EXCEPTION
    WHEN NO_DATA_FOUND THEN
        RETURN 'No Manager Found';
END;




set serveroutput on;
DECLARE
    manager VARCHAR2(50);
BEGIN
    manager := get_manager_name(101);
    DBMS_OUTPUT.PUT_LINE('Manager: ' || manager);
END;



