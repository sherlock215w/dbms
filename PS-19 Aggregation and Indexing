// Step 1: Create the collection Movies_Data with the specified fields

db.createCollection("Movies_Data");

db.Movies_Data.insertMany([
    { Movie_ID: 1, Movie_Name: "Inception", Director: "Christopher Nolan", Genre: "Sci-Fi", BoxOfficeCollection: 829895144 },
    { Movie_ID: 2, Movie_Name: "The Dark Knight", Director: "Christopher Nolan", Genre: "Action", BoxOfficeCollection: 1004558444 },
    { Movie_ID: 3, Movie_Name: "Interstellar", Director: "Christopher Nolan", Genre: "Sci-Fi", BoxOfficeCollection: 677471339 },
    { Movie_ID: 4, Movie_Name: "The Prestige", Director: "Christopher Nolan", Genre: "Drama", BoxOfficeCollection: 109676311 },
    { Movie_ID: 5, Movie_Name: "Titanic", Director: "James Cameron", Genre: "Romance", BoxOfficeCollection: 2187463944 },
    { Movie_ID: 6, Movie_Name: "Avatar", Director: "James Cameron", Genre: "Sci-Fi", BoxOfficeCollection: 2790439000 },
    { Movie_ID: 7, Movie_Name: "The Terminator", Director: "James Cameron", Genre: "Action", BoxOfficeCollection: 78350000 },
    { Movie_ID: 8, Movie_Name: "The Godfather", Director: "Francis Ford Coppola", Genre: "Crime", BoxOfficeCollection: 250000000 },
    { Movie_ID: 9, Movie_Name: "Pulp Fiction", Director: "Quentin Tarantino", Genre: "Crime", BoxOfficeCollection: 213928762 },
    { Movie_ID: 10, Movie_Name: "Kill Bill", Director: "Quentin Tarantino", Genre: "Action", BoxOfficeCollection: 180000000 }
]);

// Step 2: Queries to solve the requirements

// 1. Display a list stating how many Movies are directed by each "Director"
db.Movies_Data.aggregate([
    { $group: { _id: "$Director", totalMovies: { $sum: 1 } } },
    { $sort: { totalMovies: -1 } }
]);

// Explanation: The aggregation groups the movies by the "Director" field and counts the number of movies each director has made using `$sum: 1`. 
// The result is sorted by the total number of movies directed in descending order.

// 2. Display list of Movies with the highest BoxOfficeCollection in each Genre
db.Movies_Data.aggregate([
    { $group: { _id: "$Genre", maxBoxOffice: { $max: "$BoxOfficeCollection" } } },
    { $sort: { _id: 1 } }
]);

// Explanation: This query groups movies by their genre, then calculates the highest BoxOfficeCollection for each genre using `$max`. 
// The results are sorted by Genre in ascending order.

// 3. Display list of Movies with the highest BoxOfficeCollection in each Genre in ascending order of BoxOfficeCollection
db.Movies_Data.aggregate([
    { $group: { _id: "$Genre", maxBoxOffice: { $max: "$BoxOfficeCollection" } } },
    { $sort: { maxBoxOffice: 1 } }
]);

// Explanation: Similar to the previous query, but the result is now sorted by `maxBoxOffice` in ascending order to show genres with the lowest highest collection first.

// 4. Create an index on field Movie_ID
db.Movies_Data.createIndex({ Movie_ID: 1 });

// Explanation: This creates an index on the `Movie_ID` field to improve query performance for operations involving this field.

// 5. Create an index on fields "Movie_Name" and "Director"
db.Movies_Data.createIndex({ Movie_Name: 1, Director: 1 });

// Explanation: This creates a compound index on the `Movie_Name` and `Director` fields to optimize queries that filter or sort by these fields together.

// 6. Drop an index on field Movie_ID
db.Movies_Data.dropIndex("Movie_ID_1");

// Explanation: This drops the index on the `Movie_ID` field. The index name is automatically generated by MongoDB when it was created, and can be referenced using its default name.

// 7. Drop an index on fields "Movie_Name" and "Director"
db.Movies_Data.dropIndex("Movie_Name_1_Director_1");

// Explanation: This drops the compound index on the `Movie_Name` and `Director` fields. The name is generated automatically by MongoDB during index creation.

